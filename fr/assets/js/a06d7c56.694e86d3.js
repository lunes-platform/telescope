"use strict";(self.webpackChunktelescope=self.webpackChunktelescope||[]).push([[607],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return k}});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var o=n.createContext({}),i=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=i(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=i(a),k=s,u=d["".concat(o,".").concat(k)]||d[k]||c[k]||r;return a?n.createElement(u,l(l({ref:t},m),{},{components:a})):n.createElement(u,l({ref:t},m))}));function k(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,l=new Array(r);l[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:s,l[1]=p;for(var i=2;i<r;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6126:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return o},default:function(){return k},frontMatter:function(){return p},metadata:function(){return i},toc:function(){return c}});var n=a(7462),s=a(3366),r=(a(7294),a(3905)),l=["components"],p={sidebar_position:1,description:"How to create a wallet with Lunes SDK",keywords:["wallet","blockchain","lunes","sdk","transactions of lunes sdk","lunes sdk","generate wallet","generate transaction in lunes","lunes transactions","lunes wallet","lunes creation wallet"]},o="\ud83d\udd10 Cryptography",i={unversionedId:"sdk/wallet/cryptography",id:"sdk/wallet/cryptography",title:"\ud83d\udd10 Cryptography",description:"How to create a wallet with Lunes SDK",source:"@site/docs/sdk/wallet/cryptography.mdx",sourceDirName:"sdk/wallet",slug:"/sdk/wallet/cryptography",permalink:"/telescope/fr/docs/sdk/wallet/cryptography",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"How to create a wallet with Lunes SDK",keywords:["wallet","blockchain","lunes","sdk","transactions of lunes sdk","lunes sdk","generate wallet","generate transaction in lunes","lunes transactions","lunes wallet","lunes creation wallet"]},sidebar:"defaultSidebar",previous:{title:"\ud83d\udce6 How to Install SDK",permalink:"/telescope/fr/docs/sdk/install_sdk"},next:{title:"\ud83d\udd11 Create Wallet",permalink:"/telescope/fr/docs/sdk/wallet/create"}},m={},c=[{value:"Wallet",id:"wallet",level:2},{value:"How to implement the Lunes Wallet",id:"how-to-implement-the-lunes-wallet",level:2},{value:"Hidden your seed",id:"hidden-your-seed",level:3},{value:"Generate your Keys",id:"generate-your-keys",level:3},{value:"Assembly your Address",id:"assembly-your-address",level:3}],d={toc:c};function k(e){var t=e.components,p=(0,s.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},d,p,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-cryptography"},"\ud83d\udd10 Cryptography"),(0,r.kt)("h2",{id:"wallet"},"Wallet"),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"Wallet")," like is an e-mail account, which instead of having ",(0,r.kt)("em",{parentName:"p"},"address@provider")," and ",(0,r.kt)("em",{parentName:"p"},"password")," has:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"seed: list of random words used to generate keys and address"),(0,r.kt)("li",{parentName:"ul"},"chain: blockchain fork, can be mainnet or testnet"),(0,r.kt)("li",{parentName:"ul"},"nonce: number used to generate new keys with the same seed"),(0,r.kt)("li",{parentName:"ul"},"private key: key used to sign transactions"),(0,r.kt)("li",{parentName:"ul"},"public key: key derived from the private key used to derive the address"),(0,r.kt)("li",{parentName:"ul"},"address: public address used to receive assets")),(0,r.kt)("p",null,"The wallet can be generated for testnet or mainnet, ",(0,r.kt)("strong",{parentName:"p"},"this will only change the address"),".\nThe seed used to create a wallet must be a list of 12 or more words out of a list of 2048 words, ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/lunes-platform/lunespy/blob/468cca1cca87b1942e537c82889cd118dc66c9df/lunespy/wallet/constants.py#L8"},"see word list")),".\nThe chance of two equal wallets to be created is ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mfrac",{parentName:"mrow"},(0,r.kt)("mn",{parentName:"mfrac"},"1"),(0,r.kt)("mrow",{parentName:"mfrac"},(0,r.kt)("mn",{parentName:"mrow"},"204"),(0,r.kt)("msup",{parentName:"mrow"},(0,r.kt)("mn",{parentName:"msup"},"8"),(0,r.kt)("mi",{parentName:"msup"},"n"))))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\frac 1 {2048^n}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1.190108em",verticalAlign:"-0.345em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mopen nulldelimiter"}),(0,r.kt)("span",{parentName:"span",className:"mfrac"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.845108em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.6550000000000002em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"2"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"0"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"4"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"8"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.5935428571428571em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.786em",marginRight:"0.07142857142857144em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.5em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size3 size1 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"))))))))))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.23em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"frac-line",style:{borderBottomWidth:"0.04em"}})),(0,r.kt)("span",{parentName:"span",style:{top:"-3.394em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.345em"}},(0,r.kt)("span",{parentName:"span"}))))),(0,r.kt)("span",{parentName:"span",className:"mclose nulldelimiter"}))))))," where ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"n")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," is the number of words.\nYou can generate a wallet by passing your ",(0,r.kt)("inlineCode",{parentName:"p"},"seed")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"private key")," as parameters or ",(0,r.kt)("strong",{parentName:"p"},"nothing to generate a new one"),".\nBy changing the nonce it is possible to generate ",(0,r.kt)("strong",{parentName:"p"},"4,294,967,295")," different wallets with the same seed."),(0,r.kt)("h2",{id:"how-to-implement-the-lunes-wallet"},"How to implement the Lunes Wallet"),(0,r.kt)("h3",{id:"hidden-your-seed"},"Hidden your seed"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Choose a Nonce and a Seed"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'nonce = 0\nseed = "scrub guard swim catch range upon dawn ensure segment alpha sentence spend effort bar benefit"\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Turn them into 8-bit unsigned integer array"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"raw_seed = [0, 0, 0, 0, 115, 99, 114, 117, 98, 32, 103, 117, 97, 114, 100, 32, 115, 119, 105, 109, 32, 99, 97, 116, 99, 104, 32, 114, 97, 110, 103, 101, 32, 117, 112, 111, 110, 32, 100, 97, 119, 110, 32, 101, 110, 115, 117, 114, 101, 32, 115, 101, 103, 109, 101, 110, 116, 32, 97, 108, 112, 104, 97, 32, 115, 101, 110, 116, 101, 110, 99, 101, 32, 115, 112, 101, 110, 100, 32, 101, 102, 102, 111, 114, 116, 32, 98, 97, 114, 32, 98, 101, 110, 101, 102, 105, 116]\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Now hide your ",(0,r.kt)("inlineCode",{parentName:"strong"},"raw_seed")," by going through the hash functions blake2b-32bit then keccak-256 then sha-256, ",(0,r.kt)("inlineCode",{parentName:"strong"},"Exactly in the same order")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# blake2b 32 bit\nblake_seed = [239, 70, 82, 78, 207, 254, 146, 210, 43, 85, 189, 190, 198, 123, 21, 16, 117, 203, 246, 228, 89, 37, 13, 204, 204, 153, 20, 75, 129, 221, 74, 191]\n\n# keccak 256\nkeccak_seed = [204, 135, 46, 34, 69, 158, 92, 34, 3, 35, 101, 30, 7, 9, 122, 48, 37, 33, 98, 7, 95, 161, 1, 82, 225, 222, 15, 155, 156, 140, 53, 138]\n\n# sha 256\nsha256_seed = [163, 66, 17, 225, 21, 144, 128, 203, 241, 21, 205, 209, 16, 138, 219, 155, 50, 48, 24, 209, 227, 79, 35, 104, 252, 102, 213, 74, 63, 165, 20, 96]\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Get you Hidded Seed"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"hidded_seed = [163, 66, 17, 225, 21, 144, 128, 203, 241, 21, 205, 209, 16, 138, 219, 155, 50, 48, 24, 209, 227, 79, 35, 104, 252, 102, 213, 74, 63, 165, 20, 96]\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"seed",src:a(5995).Z,width:"2720",height:"1808"})),(0,r.kt)("h3",{id:"generate-your-keys"},"Generate your Keys"),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Use you ",(0,r.kt)("inlineCode",{parentName:"strong"},"hidded_seed")," to generate a private and public key using ",(0,r.kt)("inlineCode",{parentName:"strong"},"ed25519-axolotl")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# ed25519-axolotl\nprivate_key = [160, 66, 17, 225, 21, 144, 128, 203, 241, 21, 205, 209, 16, 138, 219, 155, 50, 48, 24, 209, 227, 79, 35, 104, 252, 102, 213, 74, 63, 165, 20, 96]\npublic_key = [28, 105, 36, 199, 36, 111, 120, 95, 152, 208, 215, 39, 161, 71, 78, 237, 200, 160, 71, 209, 177, 102, 140, 170, 56, 206, 9, 214, 227, 38, 117, 117]\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"key_pair",src:a(8102).Z,width:"2912",height:"1952"})),(0,r.kt)("h3",{id:"assembly-your-address"},"Assembly your Address"),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Hash you ",(0,r.kt)("inlineCode",{parentName:"strong"},"public_key")," using blake2b 32bit then keccak 256 then get the 20 first elements"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# blake2b_32bit -> keccak_256 -> result[0..20]\nhash_public_key = [44, 46, 82, 88, 220, 91, 204, 187, 92, 83, 89, 68, 39, 15, 115, 185, 143, 151, 57, 38, 43, 76, 101, 201, 43, 63, 17, 65, 16, 3, 71, 121]\n")),(0,r.kt)("ol",{start:7},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Join the ",(0,r.kt)("inlineCode",{parentName:"strong"},"version")," + ",(0,r.kt)("inlineCode",{parentName:"strong"},"chain")," + ",(0,r.kt)("inlineCode",{parentName:"strong"},"hash_public_key")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# version of address\nversion = 1\n# 49 for mainnet, 48 for testnet [*]\nchain = 49\n# version + chain + addr\naddr = [1, 49, 44, 46, 82, 88, 220, 91, 204, 187, 92, 83, 89, 68, 39, 15, 115, 185, 143, 151, 57, 38, 43, 76, 101, 201, 43, 63, 17, 65, 16, 3, 71, 121]\n")),(0,r.kt)("ol",{start:8},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Hash the ",(0,r.kt)("inlineCode",{parentName:"strong"},"addr")," using blake2b 32bit then keccak 256 then get the 4 first elements"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# blake2b_32bit -> keccak_256 -> result[0..4]\nchecksum = [99, 41, 200, 192]\n")),(0,r.kt)("ol",{start:9},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Join ",(0,r.kt)("inlineCode",{parentName:"strong"},"address")," + ",(0,r.kt)("inlineCode",{parentName:"strong"},"checksum")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# addr + checksum\naddress = [1, 49, 44, 46, 82, 88, 220, 91, 204, 187, 92, 83, 89, 68, 39, 15, 115, 185, 143, 151, 57, 38, 99, 41, 200, 192]\n")),(0,r.kt)("ol",{start:10},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Finally encode your human readable address using BASE58"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# base58 encode\naddress = "37o7aY3eZZTXmzrDa5e4Wj3Z4ZZuyV42Aaj"\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"address",src:a(1142).Z,width:"3544",height:"2176"})))}k.isMDXComponent=!0},1142:function(e,t,a){t.Z=a.p+"assets/images/address-70f4c314b01d2cace1c1118f7c56e82e.png"},8102:function(e,t,a){t.Z=a.p+"assets/images/keys-19d1c255dc87abd38de21e8cb41720bd.png"},5995:function(e,t,a){t.Z=a.p+"assets/images/seed-8f36c189dd02d4a09ae4f0aa5226ba0b.png"}}]);